server {
  listen 80;
  listen [::]:80;

  server_name {{ subsonic_FQDN }};

{% if subsonic_letsencrypt %}
  location /.well-known/acme-challenge/ {
    default_type "text/plain";
    root /var/www/certbot;
  }
{% endif %}
{% if subsonic_generate_self_signed_certificate and subsonic_redirect_HTTPS or subsonic_letsencrypt and letsencrypt_certificate.stat.exists %}
  location / {
    rewrite ^ https://$server_name$request_uri? permanent;
  }
{% else %}
  location / {
    proxy_pass http://localhost:{{ subsonic_port }};
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $remote_addr;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_redirect off;

    # Send websocket data to the backend aswell
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
{% endif %}
}
{% if subsonic_generate_self_signed_certificate or subsonic_letsencrypt and letsencrypt_certificate.stat.exists %}
server {
  listen 443 ssl http2;
  server_name {{ subsonic_FQDN }};
{% if subsonic_letsencrypt %}
  ssl_certificate /etc/letsencrypt/live/{{ subsonic_FQDN }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ subsonic_FQDN }}/privkey.pem;
{% else %}
  ssl_certificate {{ subsonic_certificate_path }}/fullchain.pem;
  ssl_certificate_key {{ subsonic_certificate_path }}/privkey.pem;

{% endif %}

  location / {
    proxy_pass http://localhost:{{ subsonic_port }};
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $remote_addr;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_redirect off;

    # Send websocket data to the backend aswell
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
}
{% endif %}
